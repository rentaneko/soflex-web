import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@mui/material";
import { CategoryProvider } from "@/context/CategoryContext";
import { CartProvider } from "@/context/CartContext";
import theme from "@/styles/themes";
import AppBarApp from "@/components/layout/AppBar";
import { SearchProvider } from "@/context/SearchContext";
import { Box } from "@mui/material";
import dynamic from "next/dynamic";

const inter = Inter({ subsets: ["latin"] });
export const metadata: Metadata = {
  title: "Soflex App",
  description: "Generated by create next app",
};

// Create a client-side only wrapper component
const ClientLayout = ({ children }: { children: React.ReactNode }) => {
  return (
    <ThemeProvider theme={theme}>
      <CategoryProvider>
        <CartProvider>
          <SearchProvider>
            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                minHeight: "100vh",
              }}
            >
              <AppBarApp />
              <Box
                sx={{
                  flex: 1,
                  px: { xs: 2, sm: 2.5, md: 3.75 }, // 16px on mobile, 20px on tablet, 30px on desktop
                  maxWidth: "1440px",
                  margin: "0 auto",
                  width: "100%",
                }}
              >
                {children}
              </Box>
            </Box>
          </SearchProvider>
        </CartProvider>
      </CategoryProvider>
    </ThemeProvider>
  );
};

// Create a dynamic version of the client layout
const DynamicClientLayout = dynamic(() => Promise.resolve(ClientLayout), {
  ssr: false,
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className} style={{ background: "white" }}>
        <DynamicClientLayout>{children}</DynamicClientLayout>
      </body>
    </html>
  );
}
